<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CurrentFolder_str" xml:space="preserve">
    <value>This folder itself</value>
  </data>
  <data name="FuncCycleAudio_str" xml:space="preserve">
    <value>Cycle Audio</value>
  </data>
  <data name="FuncCycleAudio_tip_str" xml:space="preserve">
    <value>Cycle the audio channel</value>
  </data>
  <data name="FuncCycleChannel_str" xml:space="preserve">
    <value>Cycle Channel</value>
  </data>
  <data name="FuncCycleChannel_tip_str" xml:space="preserve">
    <value>Cycle the video and associated audio and subtitle</value>
  </data>
  <data name="FuncCycleSubtitle_str" xml:space="preserve">
    <value>Cycle Subtitle</value>
  </data>
  <data name="FuncCycleSubtitle_tip_str" xml:space="preserve">
    <value>Cycle the subtitle channel</value>
  </data>
  <data name="FuncForwardChapter_str" xml:space="preserve">
    <value>Forward Chapter</value>
  </data>
  <data name="FuncForwardChapter_tip_str" xml:space="preserve">
    <value>Seek to next chapter</value>
  </data>
  <data name="FuncPlayExit_str" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="FuncPlayExit_tip_str" xml:space="preserve">
    <value>Close to exit the playback window.</value>
  </data>
  <data name="FuncResizeOriginal_str" xml:space="preserve">
    <value>Original Size</value>
  </data>
  <data name="FuncResizeOriginal_tip_str" xml:space="preserve">
    <value>Resize to original</value>
  </data>
  <data name="FuncRewindChapter_str" xml:space="preserve">
    <value>Rewind Chapter</value>
  </data>
  <data name="FuncRewindChapter_tip_str" xml:space="preserve">
    <value>Seek to previous chapter</value>
  </data>
  <data name="FuncSeekMinus10sec_str" xml:space="preserve">
    <value>Rewind 10sec</value>
  </data>
  <data name="FuncSeekMinus10sec_tip_str" xml:space="preserve">
    <value>Rewind 10sec</value>
  </data>
  <data name="FuncSeekMinus60sec_str" xml:space="preserve">
    <value>Rewind 60sec</value>
  </data>
  <data name="FuncSeekMinus60sec_tip_str" xml:space="preserve">
    <value>Rewind 60sec</value>
  </data>
  <data name="FuncSeekPlus10sec_str" xml:space="preserve">
    <value>Forward 10sec</value>
  </data>
  <data name="FuncSeekPlus10sec_tip_str" xml:space="preserve">
    <value>Forward 10sec</value>
  </data>
  <data name="FuncSeekPlus60sec_str" xml:space="preserve">
    <value>Forward 60sec</value>
  </data>
  <data name="FuncSeekPlus60sec_tip_str" xml:space="preserve">
    <value>Forward 60sec</value>
  </data>
  <data name="FuncSrcAutoVolume_str" xml:space="preserve">
    <value>Audio Normalize</value>
  </data>
  <data name="FuncSrcAutoVolume_tip_str" xml:space="preserve">
    <value>Dynamic normalize audio with FFmpeg dynaudnorm audio filter</value>
  </data>
  <data name="FuncSrcVolumeDown_str" xml:space="preserve">
    <value>SrcVolume Down</value>
  </data>
  <data name="FuncSrcVolumeDown_tip_str" xml:space="preserve">
    <value>Volume down with FFmpeg audio filter</value>
  </data>
  <data name="FuncSrcVolumeUp_str" xml:space="preserve">
    <value>SrcVolume Up</value>
  </data>
  <data name="FuncSrcVolumeUp_tip_str" xml:space="preserve">
    <value>Volume up with FFmpeg audio filter</value>
  </data>
  <data name="FuncToggleDisplay_str" xml:space="preserve">
    <value>Toggle Display</value>
  </data>
  <data name="FuncToggleDisplay_tip_str" xml:space="preserve">
    <value>Toggle elapsed time display</value>
  </data>
  <data name="FuncToggleFullscreen_str" xml:space="preserve">
    <value>Toggle Fullscreen</value>
  </data>
  <data name="FuncToggleFullscreen_tip_str" xml:space="preserve">
    <value>Toggle fullscreen and window</value>
  </data>
  <data name="FuncToggleMute_str" xml:space="preserve">
    <value>Mute</value>
  </data>
  <data name="FuncToggleMute_tip_str" xml:space="preserve">
    <value>Mute</value>
  </data>
  <data name="FuncTogglePause_str" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="FuncTogglePause_tip_str" xml:space="preserve">
    <value>Toggle Pause</value>
  </data>
  <data name="FuncVolumeDown_str" xml:space="preserve">
    <value>Volume Down</value>
  </data>
  <data name="FuncVolumeDown_tip_str" xml:space="preserve">
    <value>Volume Down</value>
  </data>
  <data name="FuncVolumeUp_str" xml:space="preserve">
    <value>Volume Up</value>
  </data>
  <data name="FuncVolumeUp_tip_str" xml:space="preserve">
    <value>Volume Up</value>
  </data>
  <data name="RenameMulti_str" xml:space="preserve">
    <value>Do you want to rename multiple items?</value>
  </data>
  <data name="SelectUploadFiles_str" xml:space="preserve">
    <value>Select Upload File(s)</value>
  </data>
  <data name="SelectUploadFolder_str" xml:space="preserve">
    <value>Select Upload Folder</value>
  </data>
  <data name="TrashItems_str" xml:space="preserve">
    <value>Do you want to trash items?</value>
  </data>
  <data name="UpFolder_str" xml:space="preserve">
    <value>Parent folder</value>
  </data>
  <data name="UploadFolder_str" xml:space="preserve">
    <value>Drag item contains some Folder. Do you want to continue to upload?</value>
  </data>
</root>